Spy Among Us
The Director of RAW (Research and Analysis Wing) has uncovered intel that one of the agents under him is actually a mole (spy for the competitor).
Ninja is the most trusted agent under him. He assigns Ninja the task of figuring out who the mole is.
Ninja is an excellent detective who has figured out a simple algorithm to find out who the mole is. The mole will be a person who trusts nobody in the team, yet is trusted by everyone else. He gives each agent a code-name from 1 to N.
Find out the mole and return his code-name. If not found, return -1.
Input Format:
First line of input contains two space separated integers representing total number of agents (N), and the number of trust relationships (T)
Next T lines contain two space separated integers x and y, representing that x has complete faith over y.
Constraints:
1 <= N <= 1000
1 <= T <= 10000
Output Format:
Code-name of the mole.
Sample Input:
4 5
1 3
1 4
2 3
2 4
4 3
Sample Output:
3
=================================================================================================================
White Subtree
You are given a tree consisting of n vertices. A tree is a connected undirected graph with n−1 edges. Each vertex v of this tree has a colour assigned to it (av=1 if the vertex v is white and 0 if the vertex v is black).
You have to solve the following problem for each vertex v: What is the maximum difference between the number of white and the number of black vertices you can obtain if you choose some subtree of the given tree that contains the vertex v?
The subtree of the tree is the connected subgraph of the given tree. More formally, if you choose the subtree that contains cntw (white vertices) and cntb (black vertices), you have to maximize cntw−cntb.
Input Format:
First line of input will contain T(number of test cases), each test case follows as.
Line 1: contain an integer N (number of vertex in the tree)
Line 2: contian N space separated integers where Ith integer denote the colour of the Ith vertex(1 for white and 0 for black).
Next N - 1 lines will contain two space-separated integers v and u denoting the edge between vertex u and v
Constraints:
1 <= T <= 50
1 <= N <= 10^5
0 <= arr[i] <= 1
Output Format:
for each test case print n space-separated integers res1,res2,…,resn, where resi is the maximum possible difference between the number of white and black vertices in some subtree that contains the vertex i in new line
Sample Input 1:
1
9
0 1 1 1 0 0 0 0 1
1 2
1 3
3 4
3 5
2 6
4 7
6 8
5 9
Sample Output 1:
2 2 2 2 2 1 1 0 2
=================================================================================================================
Jumping Ninja
Given the heights of N valleys arranged in consecutive manner and an integer M. In one step, Ninja can jump from valley i to valley
1. i + j where, i + j < number of valleys and 0 < j <= M
2. i - j where, i - j >= 0 and 0 < j <= M
Also, you are allowed to jump from valley i to valley j if height[i] > height[j] and height[i] > height[k] for valleys k between valley i and valley j. Ninja can start from any valley and start jumping. Determine the maximum number of valleys he can visit.
Note: Ninja is not allowed to jump to the right of Nth valley and left of 1st valley. (Stay within boundaries).
Input Format:
First line contains an integer t, representing number of test cases
Second line contains two space separated integers N and M.
Third line contains N space separated integers denoting the heights of N valleys.
Constraints:
1 <= N <= 10^4
1 <= Height[i] <= 10^5
1 <= M <= N
Time Limit: 1.5 seconds
Output Format:
Determine the maximum number of valleys Ninja can visit.
Sample Input 1:
1
11 2
6 4 14 6 8 13 9 7 10 6 12
Sample Output 1:
4
Explanation 1:
You can start at valley 11 with height 12. You can jump from valley 11 --> 9 --> 7 --> 8.
=================================================================================================================
Help Pradyumana!
Pradyumn is tired of using auto - correct feature in his smartphone. He needs to correct his auto - correct more times than the auto - correct corrects him. Pradyumn is thinking to make his own app for mobile which will restrict auto - correct feature, instead it will provide auto - completion. Whenever Pradyumn types factorial, auto - correct changes it to fact. Pradyumn's App will show options such as fact, factorial, factory. Now, he can chose from any of these options. As Pradyumn is busy with his front - end work of his App. He asks you to help him. He said "You will be given set of words(words may repeat too but counted as one only). Now, as user starts the app, he will make queries(in lowercase letters only). So, you have to print all the words of dictionary which have the prefix same as given by user as input. And if no such words are available, add this word to your dictionary." As you know, Pradyumn want this app to be as smart as him :P So, implement a program for him such that he can release it on Fun Store.
Input Format:
Single integer N which denotes the size of words which are input as dictionary
N lines of input, where each line is a string of consisting lowercase letter
Single integer Q which denotes the number of queries.
Q number of lines describing the query string on each line given by user
Constraints:
1 ≤ N ≤ 30000
sum(len(string[i])) ≤ 2∗10^5
1 ≤ Q ≤ 10^3
Output Format:
If auto - completions exists, output all of them in lexicographical order else output "No suggestions" without quotes
Sample Input 1:
3
fact
factorial
factory
2
fact
pradyumn
Sample Output 1:
fact
factorial
factory
No suggestions
